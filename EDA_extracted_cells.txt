Cell Type: code
Content:
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
--------------------------------------------------------------------------------
Cell Type: code
Content:
# Load the data

df = pd.read_csv('Carvago_encoded.csv')
--------------------------------------------------------------------------------
Cell Type: markdown
Content:
# Distribution of Numerical feaures
--------------------------------------------------------------------------------
Cell Type: code
Content:
numerical_column=  ['Year', 'Mileage' , 'Power', 'price', 'Consumption_Standardized' , 'CO2_emissions', 'Engine_capacity' ]

--------------------------------------------------------------------------------
Cell Type: code
Content:
# Create distribution plots for numerical features
fig, axes = plt.subplots(4, 2, figsize=(15, 20))
fig.suptitle('Distribution of Numerical Features', fontsize=16)

# Flatten axes array for easier iteration
axes = axes.flatten()

# Plot distribution for each numerical feature
for idx, col in enumerate(numerical_column):
    sns.histplot(data=df[col], bins=20, kde=True, ax=axes[idx])
    axes[idx].set_title(f'Distribution of {col}')
    axes[idx].set_xlabel(col)
    axes[idx].set_ylabel('Count')

# Remove empty subplot if odd number of features
if len(numerical_column) < len(axes):
    fig.delaxes(axes[-1])

plt.tight_layout()
plt.show()

# Display basic statistics
print("\nBasic statistics for numerical features:")
print(df[numerical_column].describe())
--------------------------------------------------------------------------------
Cell Type: code
Content:
categorical_column = ['Transmission', 'Fuel', 'Doors','Emission_class','Seats','Drive_type']
--------------------------------------------------------------------------------
Cell Type: code
Content:
print(df.info())
--------------------------------------------------------------------------------
Cell Type: code
Content:

--------------------------------------------------------------------------------
Cell Type: code
Content:
df.describe()
print(df.columns)
--------------------------------------------------------------------------------
Cell Type: code
Content:
plt.figure(figsize=(12,8))
sns.heatmap(df[numerical_column].corr(), annot=True)
plt.title('Correlation Matrix')
--------------------------------------------------------------------------------
Cell Type: markdown
Content:
On remarque qu'on a une correlation très grand entre Milelage et Year mais on peut pas supprimées une de ces colonnes car ils sont trés importants dans notre dataframe mais  pour power and Engine_capacity je veut supprimer Engine_capacity
--------------------------------------------------------------------------------
Cell Type: code
Content:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# Display basic information about the dataset
def basic_info(df):
    print("Dataset Information:")
    print(df.info())
    print("\nBasic Statistics:")
    print(df.describe())
    print("\nMissing Values:")
    print(df.isnull().sum())

# Categorical columns analysis
def categorical_analysis(df, categorical_columns):
    plt.figure(figsize=(20, 15))
    for i, col in enumerate(categorical_columns, 1):
        plt.subplot(4, 3, i)
        df[col].value_counts().plot(kind='bar')
        plt.title(f'Distribution of {col}')
        plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Numerical columns analysis
def numerical_analysis(df, numerical_columns):
    # Boxplots
    plt.figure(figsize=(20, 10))
    df[numerical_columns].boxplot()
    plt.title('Boxplots of Numerical Columns')
    plt.xticks(rotation=45, ha='right')
    plt.show()
    
    # Correlation Heatmap
    plt.figure(figsize=(12, 10))
    sns.heatmap(df[numerical_columns].corr(), annot=True, cmap='coolwarm', linewidths=0.5)
    plt.title('Correlation Heatmap of Numerical Columns')
    plt.show()

# Relationship between categorical and numerical columns
def categorical_numerical_relationship(df, categorical_columns, numerical_columns):
    plt.figure(figsize=(20, 15))
    for i, cat_col in enumerate(categorical_columns, 1):
        for j, num_col in enumerate(numerical_columns, 1):
            plt.subplot(len(categorical_columns), len(numerical_columns), (i-1)*len(numerical_columns) + j)
            sns.boxplot(x=cat_col, y=num_col, data=df)
            plt.title(f'{num_col} by {cat_col}')
            plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Main EDA function
def perform_eda(df, categorical_columns, numerical_columns):
    basic_info(df)
    categorical_analysis(df, categorical_columns)
    numerical_analysis(df, numerical_columns)
    categorical_numerical_relationship(df, categorical_columns, numerical_columns)

# Columns defined in the original input
categorical_column = ['Transmission', 'Fuel', 'Doors','Emission_class','Seats','Drive_type']
numerical_columns = ['Year', 'Mileage' , 'Power', 'price', 'Consumption_Standardized' , 'CO2_emissions', 'Engine_capacity' ]

# Execute EDA
perform_eda(df, categorical_column, numerical_columns)
--------------------------------------------------------------------------------
Cell Type: code
Content:

--------------------------------------------------------------------------------
Cell Type: code
Content:
df.shape
--------------------------------------------------------------------------------
Cell Type: markdown
Content:
### Correlation between price and categorial column 
--------------------------------------------------------------------------------
Cell Type: code
Content:
import seaborn as sns
import matplotlib.pyplot as plt

# List of specific brands to analyze
brands = ['Abarth', 'Alfa Romeo', 'Aston Martin', 'Audi', 'BMW', 'Bentley', 
          'Chevrolet', 'Citroën', 'Cupra', 'DR Automobiles', 'DS Automobiles',
          'Dacia', 'Ferrari', 'Fiat', 'Ford', 'Honda', 'Hyundai', 'Jaguar',
          'Jeep', 'Kia', 'Lamborghini', 'Lancia', 'Land Rover', 'Lexus',
          'Lynk & Co', 'MG', 'MINI', 'Maserati', 'Mazda', 'Mercedes-Benz',
          'Mitsubishi', 'Nissan', 'Opel', 'Peugeot', 'Polestar', 'Porsche',
          'Renault', 'Seat', 'Smart', 'SsangYong', 'Subaru', 'Suzuki', 
          'Tesla', 'Toyota', 'Volkswagen', 'Volvo', 'Škoda']

# Get make columns for these brands
make_cols = [col for col in brands]

# Calculate correlations
correlations = df[make_cols + ['price']].corr()['price'].sort_values(ascending=False)

# Create visualization
plt.figure(figsize=(15, 10))
sns.barplot(x=correlations.values[:-1],  # Exclude price self-correlation
            y=correlations.index[:-1],
            orient='h')

plt.title('Correlation between Selected Car Brands and Price')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Brand')

# Print top correlations
print("Top 10 brand correlations with price:")
print(correlations[:-1].head(10))

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------
Cell Type: code
Content:
# Extract interior material columns
interior_material_cols = [col for col in df.columns if 'Interior_material' in col]

# Calculate correlations
interior_correlations = df[interior_material_cols + ['price']].corr()['price'].sort_values(ascending=False)

# Create visualization
plt.figure(figsize=(12, 6))
sns.barplot(x=interior_correlations.values[:-1],  # Exclude price self-correlation
            y=interior_correlations.index[:-1],
            orient='h')

plt.title('Correlation between Interior Materials and Price')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Interior Material')

# Print correlations
print("Correlations between interior materials and price:")
print(interior_correlations[:-1])

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------
Cell Type: code
Content:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Vérifier toutes les colonnes d'interior color
print("Toutes les colonnes d'interior color:")
interior_color_cols = [col for col in df.columns if 'Interior_color' in col]
print(interior_color_cols)

# Calculer les corrélations en incluant explicitement 'Interior_color_Other interior'
interior_color_correlations = df[interior_color_cols + ['price']].corr()['price']
interior_color_correlations = interior_color_correlations.sort_values(ascending=False)

# Créer visualisation
plt.figure(figsize=(10, 6))
sns.barplot(x=interior_color_correlations.values[:-1],
            y=interior_color_correlations.index[:-1],
            orient='h')

plt.title('Correlation between All Interior Colors and Price')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Interior Color')

# Afficher toutes les corrélations
print("\nCorrélations entre tous les interior colors et price:")
print(interior_color_correlations[:-1])

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------
Cell Type: code
Content:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Extract body color columns
body_color_cols = [col for col in df.columns if 'Body_color' in col]

# Calculate correlations
body_color_correlations = df[body_color_cols + ['price']].corr()['price'].sort_values(ascending=False)

# Create visualization
plt.figure(figsize=(10, 6))
sns.barplot(x=body_color_correlations.values[:-1],  # Exclude price self-correlation
            y=body_color_correlations.index[:-1],
            orient='h')

plt.title('Correlation between Body Colors and Price')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Body Color')

# Print correlations
print("Correlations between body colors and price:")
print(body_color_correlations[:-1])

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------
Cell Type: code
Content:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Extract body type columns
body_cols = [col for col in df.columns if 'Body_' in col]

# Calculate correlations
body_correlations = df[body_cols + ['price']].corr()['price'].sort_values(ascending=False)

# Create visualization
plt.figure(figsize=(10, 6))
sns.barplot(x=body_correlations.values[:-1],  # Exclude price self-correlation
            y=body_correlations.index[:-1],
            orient='h')

plt.title('Correlation between Body Types and Price')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Body Type')

# Print correlations
print("Correlations between body types and price:")
print(body_correlations[:-1])

plt.tight_layout()
plt.show()
--------------------------------------------------------------------------------
Cell Type: markdown
Content:
### je veut supprimé les colonnes qu'ils ont une  correlation très petit avec le prix
--------------------------------------------------------------------------------
Cell Type: code
Content:
# Get columns to drop
interior_color_cols = [col for col in df.columns if 'Interior_color' in col]
body_color_cols = [col for col in df.columns if 'Body_color' in col]
columns_to_drop = interior_color_cols + body_color_cols

# Drop columns
df = df.drop(columns=columns_to_drop)

# Verify columns were dropped
print("Columns dropped:")
for col in columns_to_drop:
    print(col)

print("\nRemaining columns:")
print(df.columns.tolist())

# Verify shape of dataframe
print(f"\nNew DataFrame shape: {df.shape}")
--------------------------------------------------------------------------------
Cell Type: code
Content:
# Save final DataFrame to CSV
df.to_csv('dataFinal.csv', index=False)

# Verify file was created and show first few rows
print("File saved as dataFinal.csv")
print("\nFirst few rows of saved data:")
pd.read_csv('dataFinal.csv').head()

# Show file info
import os
file_size = os.path.getsize('dataFinal.csv') / 1024  # Size in KB
print(f"\nFile size: {file_size:.2f} KB")
print(f"Number of rows: {len(df)}")
print(f"Number of columns: {len(df.columns)}")
--------------------------------------------------------------------------------
Cell Type: code
Content:

--------------------------------------------------------------------------------
